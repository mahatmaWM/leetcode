#
# @lc app=leetcode.cn id=1021 lang=python3
#
# [1021] 删除最外层的括号
#
# https://leetcode-cn.com/problems/remove-outermost-parentheses/description/
#
# algorithms
# Easy (76.90%)
# Likes:    117
# Dislikes: 0
# Total Accepted:    30.2K
# Total Submissions: 39.1K
# Testcase Example:  '"(()())(())"'
#
# 有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+
# 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
#
# 如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
#
# 给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
#
# 对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。
#
#
#
# 示例 1：
#
# 输入："(()())(())"
# 输出："()()()"
# 解释：
# 输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
# 删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
#
# 示例 2：
#
# 输入："(()())(())(()(()))"
# 输出："()()()()(())"
# 解释：
# 输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
# 删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
#
#
# 示例 3：
#
# 输入："()()"
# 输出：""
# 解释：
# 输入字符串为 "()()"，原语化分解得到 "()" + "()"，
# 删除每个部分中的最外层括号后得到 "" + "" = ""。
#
#
#
#
# 提示：
#
#
# S.length <= 10000
# S[i] 为 "(" 或 ")"
# S 是一个有效括号字符串
#
#
#


# @lc code=start
class Solution:
    # 思路，找出S中的原语。原语为左括号和右括号正好匹配的字符串，也就是说把原语进行栈操作，栈是为空的。
    # 因此可用一个stack存放S的字符，左括号添加进stack，如果是右括号就将stack末位弹出，当数组为空时，说明这是一个原语。
    # 通过记录原语的起始位置，去掉最外层括号后，连接到返回值。
    def removeOuterParentheses(self, S: str) -> str:
        res = ''
        atom_begin = 0
        stack = []
        for i in range(len(S)):
            if S[i] == ')':
                stack.pop()
                # 找到原语，取出对应的结果并设置新原语的begin位置
                if not stack:
                    res += S[atom_begin + 1:i]
                    atom_begin = i + 1
            else:
                stack.append(S[i])
        return res


# @lc code=end
